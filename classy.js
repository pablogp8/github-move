/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var classy = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,4],$V2=[1,8],$V3=[19,22,24,25,26,27,28,30,31,32,38],$V4=[2,6],$V5=[1,12],$V6=[1,26],$V7=[1,16],$V8=[1,17],$V9=[1,19],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,24],$Vf=[1,25],$Vg=[1,28],$Vh=[1,33],$Vi=[1,34],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,39],$Vo=[18,20,33,34,35,36,37,39,40],$Vp=[18,20,33,34,35,36,37,39],$Vq=[2,8],$Vr=[18,20,33,34,36,37,39],$Vs=[18,20,39],$Vt=[9,19,21,22,24,25,26,27,28,30,31,32,38];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"pgm":3,"cdl":4,"MAIN":5,"LBRACE":6,"vdl":7,"el":8,"RBRACE":9,"ENDOFFILE":10,"c":11,"CLASS":12,"id":13,"EXTENDS":14,"mdl":15,"VAR":16,"t":17,"SEMICOLON":18,"LPAREN":19,"RPAREN":20,"NATTYPE":21,"ID":22,"e":23,"NATLITERAL":24,"NUL":25,"NEW":26,"THIS":27,"IF":28,"ELSE":29,"FOR":30,"READNAT":31,"PRINTNAT":32,"PLUS":33,"MINUS":34,"TIMES":35,"EQUALITY":36,"GREATER":37,"NOT":38,"OR":39,"DOT":40,"ASSIGN":41,"$accept":0,"$end":1},
terminals_: {2:"error",5:"MAIN",6:"LBRACE",9:"RBRACE",10:"ENDOFFILE",12:"CLASS",14:"EXTENDS",16:"VAR",18:"SEMICOLON",19:"LPAREN",20:"RPAREN",21:"NATTYPE",22:"ID",24:"NATLITERAL",25:"NUL",26:"NEW",27:"THIS",28:"IF",29:"ELSE",30:"FOR",31:"READNAT",32:"PRINTNAT",33:"PLUS",34:"MINUS",35:"TIMES",36:"EQUALITY",37:"GREATER",38:"NOT",39:"OR",40:"DOT",41:"ASSIGN"},
productions_: [0,[3,7],[4,2],[4,0],[11,8],[7,5],[7,0],[15,11],[15,0],[17,1],[17,1],[13,1],[8,3],[8,2],[23,1],[23,1],[23,1],[23,2],[23,1],[23,11],[23,11],[23,3],[23,4],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,5],[23,4],[23,6],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:$V0,11:3,12:$V1},{1:[3]},{5:[1,5]},{4:6,5:$V0,11:3,12:$V1},{13:7,22:$V2},{6:[1,9]},{5:[2,2]},{14:[1,10]},o([6,14,18,19,20,22,33,34,35,36,37,39,40,41],[2,11]),o($V3,$V4,{7:11,16:$V5}),{13:13,22:$V2},{8:14,13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:29,17:27,21:$Vg,22:$V2},{6:[1,30]},{9:[1,31]},{18:[1,32],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16],{19:[1,41],41:[1,40]}),{13:42,22:$V2},o($Vo,[2,18]),{19:[1,43]},{19:[1,44]},{19:[1,45]},{19:[1,46]},{13:18,19:$V6,22:$V2,23:47,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:48,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:49,22:$V2},{22:[2,9]},{22:[2,10]},o([9,21,22],$V4,{7:50,16:$V5}),{10:[1,51]},{8:52,9:[2,13],13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:53,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:54,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:55,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:56,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:57,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:58,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:59,22:$V2},{13:18,19:$V6,22:$V2,23:60,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:61,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($Vo,[2,17]),{13:18,19:$V6,22:$V2,23:62,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:63,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{20:[1,64]},{13:18,19:$V6,22:$V2,23:65,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($Vp,[2,28],{40:$Vn}),{20:[1,66],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{18:[1,67]},{9:$Vq,13:29,15:68,17:69,21:$Vg,22:$V2},{1:[2,1]},{9:[2,12]},o($Vr,[2,23],{35:$Vj,40:$Vn}),o($Vr,[2,24],{35:$Vj,40:$Vn}),o($Vp,[2,25],{40:$Vn}),o($Vs,[2,26],{33:$Vh,34:$Vi,35:$Vj,40:$Vn}),o($Vs,[2,27],{33:$Vh,34:$Vi,35:$Vj,40:$Vn}),o($Vs,[2,29],{33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,40:$Vn}),o($Vo,[2,30],{19:[1,71],41:[1,70]}),o([18,20],[2,31],{33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn}),{20:[1,72],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{20:[1,73],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{18:[1,74],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},o($Vo,[2,21]),{20:[1,75],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},o($Vo,[2,35]),o($Vt,$V4,{7:76,16:$V5}),{9:[1,77]},{13:78,22:$V2},{13:18,19:$V6,22:$V2,23:79,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:18,19:$V6,22:$V2,23:80,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($Vo,[2,33]),{6:[1,81]},{13:18,19:$V6,22:$V2,23:82,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($Vo,[2,22]),o($Vt,[2,5]),o([5,12],[2,4]),{19:[1,83]},o($Vo,[2,32]),{20:[1,84],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{8:85,13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{18:[1,86],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{13:29,17:87,21:$Vg,22:$V2},o($Vo,[2,34]),{9:[1,88]},{13:18,19:$V6,22:$V2,23:89,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{13:90,22:$V2},{29:[1,91]},{20:[1,92],33:$Vh,34:$Vi,35:$Vj,36:$Vk,37:$Vl,39:$Vm,40:$Vn},{20:[1,93]},{6:[1,94]},{6:[1,95]},{6:[1,96]},{8:97,13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},{8:98,13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($V3,$V4,{7:99,16:$V5}),{9:[1,100]},{9:[1,101]},{8:102,13:18,19:$V6,22:$V2,23:15,24:$V7,25:$V8,26:$V9,27:$Va,28:$Vb,30:$Vc,31:$Vd,32:$Ve,38:$Vf},o($Vo,[2,19]),o($Vo,[2,20]),{9:[1,103]},{9:$Vq,13:29,15:104,17:69,21:$Vg,22:$V2},{9:[2,7]}],
defaultActions: {6:[2,2],28:[2,9],29:[2,10],51:[2,1],52:[2,12],104:[2,7]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore comment */
break;
case 1:return 5;
break;
case 2:return 12;
break;
case 3:return 14;
break;
case 4:return 21;
break;
case 5:return 28;
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 32;
break;
case 9:return 31;
break;
case 10:return 27;
break;
case 11:return 26;
break;
case 12:return 16;
break;
case 13:return 25;
break;
case 14:return 24;
break;
case 15:return 22;
break;
case 16:return 36;
break;
case 17:return 41;
break;
case 18:return 33;
break;
case 19:return 34;
break;
case 20:return 35;
break;
case 21:return 37;
break;
case 22:return 39;
break;
case 23:return 38;
break;
case 24:return 40;
break;
case 25:return 6;
break;
case 26:return 9;
break;
case 27:return 19;
break;
case 28:return 20;
break;
case 29:return 18;
break;
case 30:/* skip whitespace */
break;
case 31:throw 'Illegal character';
break;
case 32:return 10;
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:main\b)/,/^(?:class\b)/,/^(?:extends\b)/,/^(?:nat\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:printNat\b)/,/^(?:readNat\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:var\b)/,/^(?:null\b)/,/^(?:([0-9])+)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:==)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:>)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\.)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:\s+)/,/^(?:\.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = classy;
exports.Parser = classy.Parser;
exports.parse = function () { return classy.parse.apply(classy, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}