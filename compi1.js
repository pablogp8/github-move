/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compi1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[103,105,108],$V1=[2,105],$V2=[1,14],$V3=[1,39],$V4=[1,40],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,24],$V9=[1,25],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,23],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,35],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[5,37,47,48,49,50,51,65,68,93,96,97,98,99,100,101,103,105,108,128,130,131,132,133,137,140,141,143,144,146,148,149,150],$Vw=[1,55],$Vx=[1,60],$Vy=[1,65],$Vz=[1,66],$VA=[1,61],$VB=[1,62],$VC=[1,63],$VD=[1,64],$VE=[31,32,33,34,37,67,81,82,93,96,97,98,99,100,101,115],$VF=[5,37,46,47,48,49,50,51,64,65,68,93,96,97,98,99,100,101,103,105,108,111,116,117,118,128,130,131,132,133,137,140,141,143,144,146,148,149,150],$VG=[1,110],$VH=[1,111],$VI=[1,112],$VJ=[1,114],$VK=[1,115],$VL=[1,116],$VM=[1,119],$VN=[1,108],$VO=[1,122],$VP=[1,121],$VQ=[1,123],$VR=[1,124],$VS=[1,125],$VT=[1,126],$VU=[1,127],$VV=[1,128],$VW=[1,129],$VX=[2,70],$VY=[1,132],$VZ=[1,131],$V_=[1,138],$V$=[1,135],$V01=[1,137],$V11=[37,85,86,87,88,89,90,91,92],$V21=[1,158],$V31=[1,179],$V41=[1,180],$V51=[33,67],$V61=[2,127],$V71=[1,183],$V81=[1,184],$V91=[1,185],$Va1=[1,186],$Vb1=[1,187],$Vc1=[1,188],$Vd1=[1,189],$Ve1=[1,190],$Vf1=[1,191],$Vg1=[1,192],$Vh1=[1,193],$Vi1=[1,194],$Vj1=[1,195],$Vk1=[1,196],$Vl1=[10,18,19,20,21,22,23,24,25,26,27,28,29,30,33,37,46,64,67,154],$Vm1=[2,84],$Vn1=[1,201],$Vo1=[1,200],$Vp1=[2,56],$Vq1=[1,204],$Vr1=[10,18,19,20,21,22,23,24,25,26,27,28,29,30,33,37,46,62,64,67,154],$Vs1=[1,219],$Vt1=[31,32,34,37,81,82,93,96,97,98,99,100,101,115],$Vu1=[2,143],$Vv1=[1,260],$Vw1=[10,18,19,20,21,22,23,24,25,26,27,33,37,46,64,67,154],$Vx1=[1,290],$Vy1=[46,67],$Vz1=[10,62,63],$VA1=[37,47,48,49,50,51,64],$VB1=[5,37,46,47,48,49,50,51,65,68,93,96,97,98,99,100,101,103,105,108,111,116,117,118,128,130,131,132,133,137,140,141,143,144,146,148,149,150],$VC1=[37,46,93,96,97,98,99,100,101,115,124],$VD1=[2,148],$VE1=[10,18,19,33,37,46,64,67,154],$VF1=[10,18,19,20,21,33,37,46,64,67,154],$VG1=[10,18,19,20,21,24,25,26,27,33,37,46,64,67,154],$VH1=[10,18,19,20,21,26,27,33,37,46,64,67,154],$VI1=[37,46,47,48,49,50,51,65,68,93,96,97,98,99,100,101,111,116,117,118,128,130,131,132,133,137,140,141,143,144,146,148,149,150],$VJ1=[2,120],$VK1=[1,357],$VL1=[1,356],$VM1=[1,359],$VN1=[47,48,49,50,51],$VO1=[2,134],$VP1=[1,369],$VQ1=[1,376],$VR1=[1,377],$VS1=[1,378],$VT1=[153,155];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"lisexp":4,"EOF":5,"expressions2":6,"declara":7,"declara2":8,"funci":9,"PCOMA":10,"classes":11,"estrut":12,"puntcre":13,"destrupunt":14,"strdat":15,"sentscontr":16,"e":17,"MAS":18,"MENOS":19,"MULTI":20,"DIVI":21,"MAYIGL":22,"MENIGL":23,"MAYOR":24,"MENOR":25,"IGL":26,"DIFE":27,"OOR":28,"OAND":29,"OXOR":30,"ONOT":31,"APAREN":32,"CPAREN":33,"NUMERO":34,"expc":35,"tipodat":36,"ID":37,"declara1":38,"constructo":39,"constructo2":40,"constructo1":41,"listparam1":42,"listallam2":43,"ALLAVE":44,"bodyfun":45,"CLLAVE":46,"TENTE":47,"TDECI":48,"TCARAC":49,"TBOOL":50,"VACIO":51,"asignapr1":52,"declara3":53,"estrpun":54,"expc2":55,"asigna":56,"defarre":57,"asignapr2":58,"PUNTO":59,"PPUNTE":60,"funciones":61,"ASIG":62,"ACORCH":63,"CCORCH":64,"CREAP":65,"puntcre2":66,"COMA":67,"DESTPUNT":68,"asignapr3":69,"aop":70,"aumdism":71,"NUEVO":72,"nadda":73,"AUMEN":74,"DISM":75,"ASUM":76,"AMULTI":77,"AMENOS":78,"ADIVI":79,"expc1":80,"CADENA":81,"CARACTER":82,"classes1":83,"listallam":84,"TAMN":85,"INSRT":86,"OBTNR":87,"BSQR":88,"APILAR":89,"DAPILAR":90,"ENCOLAR":91,"DENCOLAR":92,"CONCAT":93,"funci2":94,"cncat":95,"CONVCAD":96,"CONVENT":97,"IMPR":98,"OBTDIR":99,"RESERMEM":100,"CONSULTAM":101,"importacion":102,"IMPOR":103,"classes2":104,"CLASS":105,"hern":106,"bodclas":107,"PRINCIPAL":108,"HERENC":109,"visible":110,"OVERWRIT":111,"posid2":112,"listallameste":113,"posid":114,"ESTE":115,"PUBL":116,"PRIV":117,"PROTE":118,"listparam":119,"tipfun":120,"listparam3":121,"FUNSC":122,"asignapr12":123,"RETORNA":124,"NADA":125,"nadda2":126,"nadda2op":127,"ESTRUCTUR":128,"bodestrut":129,"LISTT":130,"PILA":131,"COLA":132,"CSI":133,"sentifV":134,"sentiff":135,"FSI":136,"EVALUARS":137,"bodeval":138,"defeval":139,"REPMNT":140,"HACER":141,"MNTRAS":142,"CICLODC":143,"REPTIR":144,"HASTAQ":145,"REPCONT":146,"bodrepcon":147,"ENCICLAR":148,"CONTADOR":149,"LEERT":150,"EVERDAD":151,"EFALSO":152,"ESIGLA":153,"DPUNTO":154,"DFCT":155,"VARIBL":156,"DSD":157,"HSTA":158,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PCOMA",18:"MAS",19:"MENOS",20:"MULTI",21:"DIVI",22:"MAYIGL",23:"MENIGL",24:"MAYOR",25:"MENOR",26:"IGL",27:"DIFE",28:"OOR",29:"OAND",30:"OXOR",31:"ONOT",32:"APAREN",33:"CPAREN",34:"NUMERO",37:"ID",44:"ALLAVE",46:"CLLAVE",47:"TENTE",48:"TDECI",49:"TCARAC",50:"TBOOL",51:"VACIO",59:"PUNTO",60:"PPUNTE",62:"ASIG",63:"ACORCH",64:"CCORCH",65:"CREAP",67:"COMA",68:"DESTPUNT",72:"NUEVO",74:"AUMEN",75:"DISM",76:"ASUM",77:"AMULTI",78:"AMENOS",79:"ADIVI",81:"CADENA",82:"CARACTER",85:"TAMN",86:"INSRT",87:"OBTNR",88:"BSQR",89:"APILAR",90:"DAPILAR",91:"ENCOLAR",92:"DENCOLAR",93:"CONCAT",96:"CONVCAD",97:"CONVENT",98:"IMPR",99:"OBTDIR",100:"RESERMEM",101:"CONSULTAM",103:"IMPOR",105:"CLASS",108:"PRINCIPAL",109:"HERENC",111:"OVERWRIT",115:"ESTE",116:"PUBL",117:"PRIV",118:"PROTE",122:"FUNSC",124:"RETORNA",125:"NADA",128:"ESTRUCTUR",130:"LISTT",131:"PILA",132:"COLA",133:"CSI",136:"FSI",137:"EVALUARS",140:"REPMNT",141:"HACER",142:"MNTRAS",143:"CICLODC",144:"REPTIR",145:"HASTAQ",146:"REPCONT",148:"ENCICLAR",149:"CONTADOR",150:"LEERT",151:"EVERDAD",152:"EFALSO",153:"ESIGLA",154:"DPUNTO",155:"DFCT",156:"VARIBL",157:"DSD",158:"HSTA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,1],[17,1],[7,2],[8,2],[39,3],[40,1],[40,1],[40,0],[41,1],[41,3],[36,1],[36,1],[36,1],[36,1],[36,1],[38,2],[38,2],[38,2],[38,1],[38,4],[38,3],[54,1],[54,1],[53,1],[53,2],[53,1],[53,3],[56,2],[56,0],[57,4],[57,3],[13,8],[66,1],[66,1],[14,5],[52,2],[52,1],[52,1],[69,1],[69,2],[69,1],[58,2],[58,0],[71,1],[71,1],[70,2],[70,2],[70,2],[70,2],[35,2],[35,1],[35,1],[35,1],[35,1],[80,2],[80,3],[80,0],[55,1],[55,2],[55,4],[55,4],[55,4],[55,4],[55,3],[55,4],[55,3],[9,7],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[94,1],[95,2],[95,0],[102,6],[102,0],[11,2],[104,6],[104,6],[106,2],[106,0],[107,3],[107,2],[107,4],[107,3],[107,2],[107,2],[107,2],[107,2],[107,2],[107,0],[84,1],[84,0],[43,5],[43,2],[113,1],[114,1],[114,0],[112,1],[112,0],[83,3],[110,1],[110,1],[110,1],[110,0],[61,6],[119,1],[119,0],[42,5],[42,3],[120,1],[120,1],[121,3],[121,0],[45,6],[45,4],[45,3],[45,4],[45,0],[123,1],[123,2],[73,1],[73,3],[126,3],[126,1],[126,3],[127,3],[127,1],[12,6],[129,1],[129,1],[129,2],[129,2],[15,9],[15,9],[15,9],[16,7],[16,8],[16,6],[16,8],[16,8],[16,8],[16,6],[16,4],[16,6],[16,7],[134,3],[135,3],[135,0],[138,3],[138,4],[139,2],[147,11]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
typeof console !== 'undefined' ? console.log(JSON.stringify($$[$0-1])) : print($$[$0-1]);
        return $$[$0-1];
break;
case 2:
this.$ = prependChild($$[$0-1], $$[$0]);
break;
case 3:
 this.$=['expresion',{},$$[$0]];
break;
case 4:
 this.$=$$[$0]; 
break;
case 5: case 34: case 45: case 51: case 64: case 65: case 66: case 68: case 80: case 81: case 149: case 157:
this.$=$$[$0]
break;
case 6:
 this.$= $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12:
 this.$= $$[$0]; 
break;
case 13:
this.$ = ['SUMA',{},$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ['RES',{},$$[$0-2],$$[$0]];
break;
case 15:
this.$ = ['MULTIP',{},$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ['DIVI',{},$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ['MAYIGL',{},$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ['MENIGL',{},$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ['MAYOR',{},$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ['MENOR',{},$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ['IGL',{},$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ['DIFE',{},$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ['OOR',{},$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ['OAND',{},$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ['OXOR',{},$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ['ONOT',{},$$[$0]];
break;
case 27:
this.$ = $$[$0-1];
break;
case 28:
this.$ = Number(yytext);
break;
case 29: case 55: case 60: case 101: case 109: case 121: case 125: case 126: case 128: case 136: case 140: case 141: case 176: case 177:
this.$=$$[$0];
break;
case 30:
this.$ = ['Declaracion',{},$$[$0-1],$$[$0]];
break;
case 31:

                    if(Array.isArray($$[$0])){
                        if($$[$0][0]==='Declaracion'){
                            this.$=['Declaracion',{},$$[$0-1],['Identifica',{},$$[$0][1],$$[$0][2]]];
                        }else if($$[$0][0]==='Asigna'){
                             this.$ = ['Identifica',{},$$[$0-1],$$[$0]];
                        }else if($$[$0][0]=='DEFARREGLO'){
                            this.$=['Identifica',{},$$[$0-1],$$[$0]];
                        }else{
                            this.$=prependChild($$[$0],$$[$0-1]);
                        }
                    }else{
                        this.$ = ['Identifica',{},$$[$0-1],$$[$0]];
                    }
                
break;
case 32:
this.$=prependChild($$[$0-2],$$[$0])
break;
case 33:
this.$=['DECLARAFUN',{},$$[$0]];
break;
case 35:
this.$=['VACIO',{},{}];
break;
case 36:
this.$='1'
break;
case 37:
this.$=$$[$0-1]
break;
case 38: case 39: case 40: case 41: case 42: case 61:
this.$=yytext;
break;
case 43: case 52:
this.$=['Asigna',{},$$[$0-1]];
break;
case 44:
this.$=['Declaracion',$$[$0-1],$$[$0]];
break;
case 46:
this.$="1";
break;
case 48: case 54:
this.$=['DEFARREGLO',{},$$[$0-2],$$[$0-1]];
break;
case 49:
this.$='PUNTO'
break;
case 50:
this.$='ASIPUNT'
break;
case 53: case 56: case 70: case 103: case 110: case 122: case 127: case 129: case 137: case 143: case 178:
this.$='1';
break;
case 57:
this.$=prependChild($$[$0-3],$$[$0-1]);
break;
case 58: case 142:
this.$=['ARREGLO',{},$$[$0-1]];
break;
case 59:
this.$=['CREAPUN',$$[$0-5],$$[$0-3],$$[$0-1]];
break;
case 62:
this.$=['DESTRPUN',$$[$0-2]];
break;
case 63: case 69:
this.$ = ['VALOR',{},$$[$0]];
break;
case 67:
this.$=['NUEVO',$$[$0]];
break;
case 71:
this.$='INCREMENTA';
break;
case 72:
this.$='DECREMENTA';
break;
case 73:
this.$=['SUMCORTA',{},$$[$0]];
break;
case 74:
this.$=['MULTCORTA',{},$$[$0]];
break;
case 75:
this.$=['RESCORTA',{},$$[$0]];
break;
case 76:
this.$=['DIVICORTA',{},$$[$0]];
break;
case 77:
this.$=yytext; 
break;
case 78:
var tt=yytext.replace("\"","");this.$=tt.replace("\"","");
break;
case 79:
var tt=yytext.replace("'","");this.$=tt.replace("'","");
break;
case 82:
this.$=['METODO',{},$$[$0]];
break;
case 83:
this.$=['FUNCION',{},$$[$0-1]];
break;
case 84:
this.$="";
break;
case 85:
this.$=['TAMANIO',{}];
break;
case 86:
this.$=['METODO',{},$$[$0-1],$$[$0]];
break;
case 87:
this.$=['INSERTAR',{},$$[$0-1]];
break;
case 88:
this.$=['OBTENER',{},$$[$0-1]];
break;
case 89:
this.$=['BUSCAR',{},$$[$0-1]];
break;
case 90:
this.$=['APILAR',{},$$[$0-1]];
break;
case 91:
this.$=['DESAPILAR',{}];
break;
case 92:
this.$=['ENCOLAR',{},$$[$0-1]];
break;
case 93:
this.$=['DESENCOLAR',{}];
break;
case 94:
this.$=['CONCATENA',{},$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 95:
this.$=['CONVCADENA',{},$$[$0-1]];
break;
case 96:
this.$=['CONVENTERO',{},$$[$0-1]];
break;
case 97:
this.$=['IMPRIMIR',{},$$[$0-1]];
break;
case 98:
this.$=['OBTENERDIR',{},$$[$0-1]];
break;
case 99:
this.$=['RESMEMORIA',{},$$[$0-1]];
break;
case 100:
this.$=['CONSULTAM',{},$$[$0-1]];
break;
case 102:
this.$=$$[$0-1];
break;
case 104:
var tt=$$[$0-2].replace("\"",""); this.$=prependChild($$[$0-5],tt.replace("\"",""));
break;
case 105:
this.$=['IMPORTA',{},'1'];
break;
case 106:
this.$=['CLASE',$$[$0-1],$$[$0][1],$$[$0][2],$$[$0][3]];
break;
case 107:
this.$=['DECLASE',$$[$0-4],$$[$0-3],$$[$0-1]];
break;
case 108:
this.$=['MAIN',$$[$0-1]];
break;
case 111:
$$[$0].splice(1,1,$$[$0-1]);this.$=prependChild($$[$0-2],$$[$0]);
break;
case 112: case 115: case 116: case 117: case 118: case 119: case 161: case 162:
this.$=prependChild($$[$0-1],$$[$0]);
break;
case 114: case 146: case 153:
this.$=prependChild($$[$0-2],$$[$0-1]);
break;
case 120:
this.$=['CUERPOCLASS',{}];
break;
case 123:

                                if($$[$0-2]==='1'){
                                    if($$[$0]==='1'){
                                        this.$=prependChild($$[$0-4],$$[$0-1]);
                                    }else{
                                        var tem=[$$[$0-1],$$[$0]];
                                        this.$=prependChild($$[$0-4],tem);
                                    }
                                }else{
                                    var tem=[$$[$0-2],$$[$0-1]];
                                    this.$=prependChild($$[$0-4],tem);
                                }
                            
break;
case 124:
if($$[$0]==='1'){
                           this.$=['Parametros',{},$$[$0-1]]; 
                        }else{
                            this.$=['Parametros',{},[$$[$0-1],$$[$0]]];
                        }
                    
break;
case 130:
this.$=['ESTE',{},$$[$0]]
break;
case 134:
this.$='Publico';
break;
case 135:
this.$=['FUNCION',$$[$0-4],$$[$0-1]];
break;
case 138:

                        var tem=[$$[$0-2],['Identifica',{},$$[$0-1],$$[$0]]];
                        this.$=prependChild($$[$0-4],tem);
                        
break;
case 139:

                    var tem=['Identifica',{},$$[$0-1],$$[$0]];
                    this.$=['Parametros',{},[$$[$0-2],tem]];
break;
case 144:
var tem=['ESTE',$$[$0-2],$$[$0-1]];this.$=prependChild($$[$0-5],tem);
break;
case 145:
var tem=['Asigna',{},$$[$0-2],$$[$0-1]];this.$=prependChild($$[$0-3],tem);
break;
case 147:
var tem=['RETORNA',$$[$0-1]];this.$=prependChild($$[$0-3],tem);
break;
case 148:
this.$=['CUERPOFUN',{}];
break;
case 150:
this.$=['DEFARREGLO',{},$$[$0-1],$$[$0]];
break;
case 151:
this.$='NADA'
break;
case 152: case 155: case 156:
this.$=['VALARREGLO',{},$$[$0-1]];
break;
case 154:
this.$=['VALOR',{},$$[$0]];
break;
case 158:
this.$=['ESTRUCTURA',$$[$0-4],$$[$0-2]];
break;
case 159: case 160:
this.$=['CUERPOESTR',{},$$[$0]];
break;
case 163:
this.$=['LISTA',$$[$0-7],$$[$0-2]];
break;
case 164:
this.$=['PILA',$$[$0-7],$$[$0-2]];
break;
case 165:
this.$=['COLA',$$[$0-7],$$[$0-2]];
break;
case 166:
this.$=['SI',$$[$0-4],$$[$0-2],$$[$0-1]];
break;
case 167:
this.$=['EVALUARSI',$$[$0-5],$$[$0-2],$$[$0-1]];
break;
case 168:
this.$=['REPETIRMNT',$$[$0-3],$$[$0]];
break;
case 169:
this.$=['HACER',$$[$0-1],$$[$0-5]];
break;
case 170:
this.$=['CICLODC',$$[$0-5],$$[$0-3],$$[$0]];
break;
case 171:
this.$=['REPETIR',$$[$0-1],$$[$0-5]];
break;
case 172:
this.$=['REPCONT',$$[$0-3],$$[$0]];
break;
case 173:
this.$=['ENCILCAR',$$[$0-2],$$[$0]];
break;
case 174:
this.$=['CONTADOR',$$[$0-3],$$[$0]];
break;
case 175:
this.$=['LEERT',$$[$0-4],$$[$0-2]];
break;
case 179:
this.$=['EVALUAR',{},[$$[$0-1],'Cuerpo']];
break;
case 180:
var tem=[$$[$0-1],'Cuerpo']; this.$=prependChild($$[$0-3],tem);
break;
case 181:
this.$=['PORDEF','Cuerpo'];
break;
case 182:
this.$=[$$[$0-8],$$[$0-4],$$[$0]];
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,36:13,102:22,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:$V8,68:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,128:$Vh,130:$Vi,131:$Vj,132:$Vk,133:$Vl,137:$Vm,140:$Vn,141:$Vo,143:$Vp,144:$Vq,146:$Vr,148:$Vs,149:$Vt,150:$Vu}),{1:[3]},o($V0,$V1,{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,36:13,102:22,6:45,5:[1,44],37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:$V8,68:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,128:$Vh,130:$Vi,131:$Vj,132:$Vk,133:$Vl,137:$Vm,140:$Vn,141:$Vo,143:$Vp,144:$Vq,146:$Vr,148:$Vs,149:$Vt,150:$Vu}),o($Vv,[2,3]),o($Vv,[2,4]),o($Vv,[2,5]),{10:[1,46]},o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vv,[2,12]),{8:47,37:$V2},{10:[1,52],32:[1,51],37:[1,50],38:48,52:49,54:53,57:54,59:[1,58],60:[1,59],62:$Vw,63:$Vx,70:56,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{32:[1,67]},{32:[1,68]},{32:[1,69]},{32:[1,70]},{32:[1,71]},{32:[1,72]},{32:[1,73]},{103:[1,75],104:74,105:[1,76],108:[1,77]},{37:[1,78]},{32:[1,79]},{32:[1,80]},{37:[1,81]},{37:[1,82]},{37:[1,83]},{32:[1,84]},{32:[1,85]},{32:[1,86]},{44:[1,87]},{32:[1,88]},{44:[1,89]},{32:[1,90]},{37:[1,91]},{32:[1,92]},{32:[1,93]},o($VE,[2,38]),o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,41]),o($VE,[2,42]),{1:[2,1]},o($Vv,[2,2]),o($Vv,[2,6]),o($VF,[2,30]),o($VF,[2,31]),{10:[1,94]},{10:[1,98],32:[1,100],52:97,53:95,57:99,61:96,62:$Vw,63:$Vx,70:56,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{9:118,17:109,31:$VG,32:$VH,33:[2,35],34:$VI,35:113,36:107,37:$VJ,39:101,40:102,42:103,43:104,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:106,115:$VM,120:105,122:$VN},o($VF,[2,46]),{37:$VO,55:120,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW},{10:$VX,58:130,62:$VY,63:$VZ},{9:118,17:134,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:$V_,69:133,72:$V$,73:136,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,125:$V01},{10:[2,64]},{10:[2,65]},o($V11,[2,49]),o($V11,[2,50]),{9:118,17:139,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{34:[1,140]},{34:[1,141]},{34:[1,142]},{34:[1,143]},{10:[2,71]},{10:[2,72]},{37:[1,144]},{9:118,17:145,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:146,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:148,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,94:147,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{37:[1,149]},{9:118,17:150,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{37:[1,151]},o($Vv,[2,106]),{32:[1,152]},{37:[1,153]},{32:[1,154]},{63:[1,155]},{36:157,37:$V21,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,66:156},{37:[1,159]},{62:[1,160]},{62:[1,161]},{62:[1,162]},{9:118,17:163,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:164,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:165,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,166]},{9:118,17:167,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,168]},{147:169,156:[1,170]},{44:[1,171]},{9:118,17:172,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:173,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,51]),{10:[1,174]},o($VF,[2,53]),{10:$VX,58:175,62:$VY,63:$VZ},{33:[2,137],36:107,42:177,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,119:176,120:105,122:$VN},o($VF,[2,45]),{33:[1,178]},{33:[2,33],67:$V31},{33:[2,34],67:$V41},{37:[1,181]},o($V51,$V61,{114:182,37:$V71}),{37:[2,140]},{37:[2,141]},o([33,37,67],[2,125],{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),{9:118,17:197,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:198,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vl1,[2,28]),o($Vl1,[2,29]),o($Vl1,$Vm1,{80:199,32:$Vn1,59:$Vo1}),o($Vl1,[2,78]),o($Vl1,[2,79]),o($Vl1,[2,80]),o($Vl1,[2,81]),{59:[1,202]},{10:$Vp1,56:203,62:$Vq1},o($Vr1,[2,85]),o($Vr1,$Vm1,{80:205,32:$Vn1,59:$Vo1}),{32:[1,206]},{32:[1,207]},{32:[1,208]},{32:[1,209]},{32:[1,210]},{32:[1,211]},{32:[1,212]},{10:[1,213]},{9:118,17:214,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:134,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:$V_,69:215,72:$V$,73:136,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,125:$V01},{10:[2,63]},{10:[2,66],18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1},{9:118,17:216,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{10:[2,68]},{10:[2,151]},{9:118,17:218,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:$Vs1,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,126:217},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,64:[1,220]},{10:[2,73]},{10:[2,74]},{10:[2,75]},{10:[2,76]},{67:[1,221]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,222]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,223]},{33:[1,224]},o($V51,[2,101],{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),{33:[1,225]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,226]},{33:[1,227]},{81:[1,228]},{44:[2,110],106:229,109:[1,230]},{33:[1,231]},{7:233,8:234,36:13,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,129:232},{67:[1,235]},o($V51,[2,60]),o($V51,[2,61]),{33:[1,236]},{72:[1,237]},{72:[1,238]},{72:[1,239]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,240]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,241]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,242]},{142:[1,243]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,67:[1,244]},{145:[1,245]},{33:[1,246]},{154:[1,247]},{46:[1,248]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,249]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,67:[1,250]},o($VF,[2,52]),{10:[1,251]},{33:[1,252]},{33:[2,136],67:$V31},{10:[1,254],41:253,44:[1,255]},{36:107,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,120:256,122:$VN},o($Vt1,[2,129],{112:257,36:258,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7}),o($V51,$Vu1,{121:259,63:$Vv1}),o($V51,[2,124]),o($V51,[2,126]),{9:118,17:261,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:262,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:263,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:264,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:265,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:266,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:267,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:268,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:269,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:270,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:271,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:272,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:273,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vw1,[2,26],{28:$Vi1,29:$Vj1,30:$Vk1}),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,274]},o($Vl1,[2,77]),{37:$VO,55:275,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW},{9:118,17:109,31:$VG,32:$VH,33:[2,122],34:$VI,35:113,37:$VJ,43:277,81:$VK,82:$VL,83:117,84:276,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:106,115:$VM},{37:[1,278]},{10:[1,279]},{9:118,17:280,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vr1,[2,86]),{9:118,17:281,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{34:[1,282]},{9:118,17:283,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:118,17:284,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{33:[1,285]},{9:118,17:286,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{33:[1,287]},o($VF,[2,48]),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,64:[1,288]},{10:[2,69]},{10:[2,67],18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1},{46:[1,289],67:$Vx1},o($Vy1,[2,154],{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),{9:118,17:218,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:$Vs1,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,126:291},o($Vz1,[2,58]),{9:118,17:148,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,94:292,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vl1,[2,95]),o($Vl1,[2,96]),o($Vl1,[2,97]),o($Vl1,[2,98]),o($Vl1,[2,99]),o($Vl1,[2,100]),{33:[1,293]},{44:[1,294]},{37:[1,295]},{44:[1,296]},{7:298,8:299,36:13,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,64:[1,297]},o($VA1,[2,159]),o($VA1,[2,160]),{37:[1,300]},{10:[1,301]},{130:[1,302]},{131:[1,303]},{132:[1,304]},{134:305,151:[1,306]},{44:[1,307]},{44:[1,308]},{32:[1,309]},{9:118,17:310,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{32:[1,311]},{44:[1,312]},{37:[1,313]},o($VB1,[2,173]),{44:[1,314]},{37:[1,315]},o($VF,[2,54]),{44:[1,316]},o($VF,[2,32]),o($VF,[2,36]),o($VC1,$VD1,{45:317}),{37:[1,318]},{9:118,17:109,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:319,115:$VM},o($Vt1,[2,128]),o($V51,[2,139]),{9:118,17:320,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($VE1,[2,13],{20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VE1,[2,14],{20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VF1,[2,15],{22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VF1,[2,16],{22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),o($Vw1,[2,17],{28:$Vi1,29:$Vj1,30:$Vk1}),o($Vw1,[2,18],{28:$Vi1,29:$Vj1,30:$Vk1}),o($VG1,[2,19],{22:$Vc1,23:$Vd1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VG1,[2,20],{22:$Vc1,23:$Vd1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VH1,[2,21],{22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,28:$Vi1,29:$Vj1,30:$Vk1}),o($VH1,[2,22],{22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,28:$Vi1,29:$Vj1,30:$Vk1}),o($Vl1,[2,23]),o($Vl1,[2,24]),o($Vl1,[2,25]),o($Vl1,[2,27]),o($Vr1,[2,82]),{33:[1,321]},{33:[2,121],67:$V41},o($Vl1,[2,130]),o($VF,[2,47]),{10:[2,55],18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,322]},{33:[1,323]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,324]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,325]},o($Vr1,[2,91]),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,326]},o($Vr1,[2,93]),o($Vz1,[2,57]),{10:[2,152]},{9:118,17:329,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:[1,328],81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,127:327},{46:[1,330],67:$Vx1},{33:[2,103],67:[1,332],95:331},{10:[1,333]},o($VI1,$VJ1,{107:334}),{44:[2,109]},o($VI1,$VJ1,{107:335}),{10:[1,336]},o($VA1,[2,161]),o($VA1,[2,162]),{33:[1,337]},o($VB1,[2,62]),{32:[1,338]},{32:[1,339]},{32:[1,340]},{135:341,136:[2,178],152:[1,342]},{44:[1,343]},{138:344,153:[1,345]},{46:[1,346]},{9:118,17:347,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,348]},{9:118,17:349,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,350]},{10:[1,351]},{46:[1,352]},{33:[1,353]},o($VC1,$VD1,{45:354}),{9:358,37:$VK1,46:[1,355],93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VL1,124:$VM1},o($V51,$Vu1,{121:360,63:$Vv1}),o($V51,$V61,{114:361,37:$V71}),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,64:[1,362]},o($Vr1,[2,83]),o($Vr1,[2,87]),o($Vr1,[2,88]),o($Vr1,[2,89]),o($Vr1,[2,90]),o($Vr1,[2,92]),o($Vy1,[2,153]),{9:118,17:218,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,44:$Vs1,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,126:363},o($Vy1,[2,157],{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1}),o($Vy1,[2,155]),{33:[1,364]},{9:118,17:365,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($V0,[2,104]),o($VN1,$VO1,{110:367,8:368,9:370,12:371,13:372,14:373,15:374,16:375,37:$V2,46:[1,366],65:$V8,68:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,111:$VP1,116:$VQ1,117:$VR1,118:$VS1,128:$Vh,130:$Vi,131:$Vj,132:$Vk,133:$Vl,137:$Vm,140:$Vn,141:$Vo,143:$Vp,144:$Vq,146:$Vr,148:$Vs,149:$Vt,150:$Vu}),o($VN1,$VO1,{110:367,8:368,9:370,12:371,13:372,14:373,15:374,16:375,37:$V2,46:[1,379],65:$V8,68:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,111:$VP1,116:$VQ1,117:$VR1,118:$VS1,128:$Vh,130:$Vi,131:$Vj,132:$Vk,133:$Vl,137:$Vm,140:$Vn,141:$Vo,143:$Vp,144:$Vq,146:$Vr,148:$Vs,149:$Vt,150:$Vu}),o($VB1,[2,158]),{10:$Vp1,56:380,62:$Vq1},{36:157,37:$V21,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,66:381},{36:157,37:$V21,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,66:382},{36:157,37:$V21,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,66:383},{136:[1,384]},{44:[1,385]},{46:[1,386]},{139:387,153:[1,388],155:[1,389]},{9:118,17:390,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($VB1,[2,168]),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,391]},{44:[1,392]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[1,393]},o($VB1,[2,172]),{157:[1,394]},o($VB1,[2,174]),{10:[1,395]},{9:358,37:$VK1,46:[1,396],93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VL1,124:$VM1},o($VF,[2,37]),{59:[1,397]},{52:399,57:400,62:$Vw,63:$Vx,70:56,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,123:398},{10:[1,401]},{9:118,17:402,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($V51,[2,138]),o($V51,[2,123]),o($V51,[2,142]),{46:[1,403],67:$Vx1},o($Vl1,[2,94]),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[2,102]},o($Vv,[2,107]),{7:404,36:13,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VI1,[2,112]),o($VN1,$VO1,{110:405,116:$VQ1,117:$VR1,118:$VS1}),{10:[1,406]},o($VI1,[2,115]),o($VI1,[2,116]),o($VI1,[2,117]),o($VI1,[2,118]),o($VI1,[2,119]),o($VN1,[2,131]),o($VN1,[2,132]),o($VN1,[2,133]),o($Vv,[2,108]),{10:[1,407]},{33:[1,408]},{33:[1,409]},{33:[1,410]},o($VB1,[2,166]),{46:[1,411]},o([136,152],[2,176]),{46:[1,412]},{9:118,17:413,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{154:[1,414]},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,154:[1,415]},{10:[1,416]},{46:[1,417]},{10:[1,418]},{154:[1,419]},o($VB1,[2,175]),o($VF,[2,135]),{37:[1,420]},{10:[1,421]},{10:[2,149]},{10:$VX,58:422,62:$VY,63:$VZ},o($VC1,[2,146]),{10:[1,423],18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1},o($Vy1,[2,156]),o($VI1,[2,111]),{7:424,36:13,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VI1,[2,114]),o($VB1,[2,59]),{10:[1,425]},{10:[1,426]},{10:[1,427]},{136:[2,177]},o($VB1,[2,167]),{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,154:[1,428]},{46:[2,181]},o($VT1,[2,179]),o($VB1,[2,169]),o($VB1,[2,170]),o($VB1,[2,171]),{9:118,17:429,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{52:399,57:400,62:$Vw,63:$Vx,70:56,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,123:430},o($VC1,[2,145]),{10:[2,150]},o($VC1,[2,147]),o($VI1,[2,113]),o($VB1,[2,163]),o($VB1,[2,164]),o($VB1,[2,165]),o($VT1,[2,180]),{10:[1,431],18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1},{10:[1,432]},{158:[1,433]},o($VC1,[2,144]),{154:[1,434]},{9:118,17:435,31:$VG,32:$VH,34:$VI,35:113,37:$VJ,81:$VK,82:$VL,83:117,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{18:$V81,19:$V91,20:$Va1,21:$Vb1,22:$Vc1,23:$Vd1,24:$Ve1,25:$Vf1,26:$Vg1,27:$Vh1,28:$Vi1,29:$Vj1,30:$Vk1,33:[2,182]}],
defaultActions: {44:[2,1],56:[2,64],57:[2,65],65:[2,71],66:[2,72],107:[2,140],108:[2,141],133:[2,63],136:[2,68],137:[2,151],140:[2,73],141:[2,74],142:[2,75],143:[2,76],215:[2,69],289:[2,152],295:[2,109],399:[2,149],411:[2,177],414:[2,181],422:[2,150]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    function prependChild(node, child){
      node.splice(2,0,child); 
      return node;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:console.log("COMENTARIO: "+yy_.yytext); 
break;
case 2:console.log("CADENA: "+ yy_.yytext); return "CADENA"
break;
case 3:console.log("CARACTER: "+ yy_.yytext); return "CARACTER"   
break;
case 4:console.log("numero: " +yy_.yytext); return "NUMERO"
break;
case 5:console.log("Signo: " +yy_.yytext);  return "ASUM"
break;
case 6:console.log("Signo: " +yy_.yytext);  return "AMULTI"
break;
case 7:console.log("Signo: " +yy_.yytext);  return "AMENOS"
break;
case 8:console.log("Signo: " +yy_.yytext);  return "ADIVI"
break;
case 9:console.log("Signo: " +yy_.yytext); return "MULTI"
break;
case 10:console.log("Signo: " +yy_.yytext); return "DIVI"
break;
case 11:console.log("Signo: " +yy_.yytext); return "POT"
break;
case 12:console.log("Signo: " +yy_.yytext);  return "AUMEN"
break;
case 13:console.log("Signo: " +yy_.yytext);  return "DISM"
break;
case 14:console.log("Signo: " +yy_.yytext);  return "PPUNTE"
break;
case 15:console.log("Signo: " +yy_.yytext); return "MENOS"
break;
case 16:console.log("Signo: " +yy_.yytext); return "MAS"
break;
case 17:console.log("Signo: " +yy_.yytext);  return "APAREN"
break;
case 18:console.log("Signo: " +yy_.yytext);  return "CPAREN"
break;
case 19:console.log("Signo: " +yy_.yytext);  return "ACORCH"
break;
case 20:console.log("Signo: " +yy_.yytext);  return "CCORCH"
break;
case 21:console.log("Signo: " +yy_.yytext);  return "ALLAVE"
break;
case 22:console.log("Signo: " +yy_.yytext);  return "CLLAVE"
break;
case 23:console.log("Signo: " +yy_.yytext);  return "MAYIGL"
break;
case 24:console.log("Signo: " +yy_.yytext);  return "MENIGL"
break;
case 25:console.log("Signo: " +yy_.yytext);  return "MAYOR"
break;
case 26:console.log("Signo: " +yy_.yytext);  return "MENOR"
break;
case 27:console.log("Signo: " +yy_.yytext);  return "IGL"
break;
case 28:console.log("Signo: " +yy_.yytext);  return "DIFE"
break;
case 29:console.log("Signo: " +yy_.yytext);  return "ASIG"
break;
case 30:console.log("Signo: " +yy_.yytext);  return "OOR"
break;
case 31:console.log("Signo: " +yy_.yytext);  return "OAND"
break;
case 32:console.log("Signo: " +yy_.yytext);  return "OXOR"
break;
case 33:console.log("Signo: " +yy_.yytext);  return "ONOT"
break;
case 34:console.log("Signo: " +yy_.yytext);  return "PCOMA"
break;
case 35:console.log("Signo: " +yy_.yytext);  return "COMA"
break;
case 36:console.log("Signo: " +yy_.yytext);  return "PUNTO"
break;
case 37:console.log("Signo: " +yy_.yytext);  return "DPUNTO"
break;
case 38:console.log("palabra: " +yy_.yytext);  return "TENTE"
break;
case 39:console.log("palabra: " +yy_.yytext);  return "TDECI"
break;
case 40:console.log("palabra: " +yy_.yytext);  return "TCARAC"
break;
case 41:console.log("palabra: " +yy_.yytext);  return "TBOOL"
break;
case 42:console.log("palabra: " +yy_.yytext);  return "TAMN"
break;
case 43:console.log("palabra: " +yy_.yytext);  return "CONCAT"
break;
case 44:console.log("palabra: " +yy_.yytext);  return "CONVCAD"
break;
case 45:console.log("palabra: " +yy_.yytext);  return "CONVENT"
break;
case 46:console.log("palabra: " +yy_.yytext);  return "IMPR"
break;
case 47:console.log("palabra: " +yy_.yytext);  return "CLASS"
break;
case 48:console.log("palabra: " +yy_.yytext);  return "ESTE"
break;
case 49:console.log("palabra: " +yy_.yytext);  return "PRIV"
break;
case 50:console.log("palabra: " +yy_.yytext);  return "PUBL"
break;
case 51:console.log("palabra: " +yy_.yytext);  return "PROTE"
break;
case 52:console.log("palabra: " +yy_.yytext);  return "IMPOR"
break;
case 53:console.log("palabra: " +yy_.yytext);  return "HERENC"
break;
case 54:console.log("palabra: " +yy_.yytext);  return "VACIO"
break;
case 55:console.log("palabra: " +yy_.yytext);  return "RETORNA"
break;
case 56:console.log("palabra: " +yy_.yytext);  return "PRINCIPAL"
break;
case 57:console.log("palabra: " +yy_.yytext);  return "NUEVO"
break;
case 58:console.log("palabra: " +yy_.yytext);  return "NADA"
break;
case 59:console.log("palabra: " +yy_.yytext);  return "ROMPE"
break;
case 60:console.log("palabra: " +yy_.yytext);  return "CONTINUA"
break;
case 61:console.log("palabra: " +yy_.yytext);  return "ESTRUCTUR"
break;
case 62:console.log("palabra: " +yy_.yytext);  return "CREAP"
break;
case 63:console.log("palabra: " +yy_.yytext);  return "OBTDIR"
break;
case 64:console.log("palabra: " +yy_.yytext);  return "RESERMEM"
break;
case 65:console.log("palabra: " +yy_.yytext);  return "CONSULTAM"
break;
case 66:console.log("palabra: " +yy_.yytext);  return "DESTPUNT"
break;
case 67:console.log("palabra: " +yy_.yytext);  return "FUNSC"
break;
case 68:console.log("palabra: " +yy_.yytext);  return "LISTT"
break;
case 69:console.log("palabra: " +yy_.yytext);  return "INSRT"
break;
case 70:console.log("palabra: " +yy_.yytext);  return "OBTNR"
break;
case 71:console.log("palabra: " +yy_.yytext);  return "BSQR"
break;
case 72:console.log("palabra: " +yy_.yytext);  return "PILA"
break;
case 73:console.log("palabra: " +yy_.yytext);  return "APILAR"
break;
case 74:console.log("palabra: " +yy_.yytext);  return "DAPILAR"
break;
case 75:console.log("palabra: " +yy_.yytext);  return "ENCOLAR"
break;
case 76:console.log("palabra: " +yy_.yytext);  return "DENCOLAR"
break;
case 77:console.log("palabra: " +yy_.yytext);  return "COLA"
break;
case 78:console.log("palabra: " +yy_.yytext);  return "CSI"
break;
case 79:console.log("palabra: " +yy_.yytext);  return "EVERDAD"
break;
case 80:console.log("palabra: " +yy_.yytext);  return "EFALSO"
break;
case 81:console.log("palabra: " +yy_.yytext);  return "FSI"
break;
case 82:console.log("palabra: " +yy_.yytext);  return "EVALUARS"
break;
case 83:console.log("palabra: " +yy_.yytext);  return "ESIGLA"
break;
case 84:console.log("palabra: " +yy_.yytext);  return "DFCT"
break;
case 85:console.log("palabra: " +yy_.yytext);  return "REPMNT"
break;
case 86:console.log("palabra: " +yy_.yytext);  return "HACER"
break;
case 87:console.log("palabra: " +yy_.yytext);  return "MNTRAS"
break;
case 88:console.log("palabra: " +yy_.yytext);  return "CICLODC"
break;
case 89:console.log("palabra: " +yy_.yytext);  return "REPTIR"
break;
case 90:console.log("palabra: " +yy_.yytext);  return "HASTAQ"
break;
case 91:console.log("palabra: " +yy_.yytext);  return "REPCONT"
break;
case 92:console.log("palabra: " +yy_.yytext);  return "VARIBL"
break;
case 93:console.log("palabra: " +yy_.yytext);  return "DSD"
break;
case 94:console.log("palabra: " +yy_.yytext);  return "HSTA"
break;
case 95:console.log("palabra: " +yy_.yytext);  return "ENCICLAR"
break;
case 96:console.log("palabra: " +yy_.yytext);  return "CONTADOR"
break;
case 97:console.log("palabra: " +yy_.yytext);  return "LEERT"
break;
case 98:console.log("palabra: " +yy_.yytext);  return "OVERWRIT"
break;
case 99:console.log("identificador: " +yy_.yytext); return "ID"
break;
case 100:return "EOF"
break;
case 101:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*[^"*\/"]*\*\/)/,/^(?:"[^\"]*")/,/^(?:'[^"'"]')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\?\?)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:booleano\b)/,/^(?:tamanio\b)/,/^(?:concatenar\b)/,/^(?:convertirAcadena\b)/,/^(?:convertirAentero\b)/,/^(?:imprimir\b)/,/^(?:clase\b)/,/^(?:este\b)/,/^(?:privado\b)/,/^(?:publico\b)/,/^(?:protegido\b)/,/^(?:importar\b)/,/^(?:hereda_de\b)/,/^(?:vacio\b)/,/^(?:retornar\b)/,/^(?:principal\b)/,/^(?:nuevo\b)/,/^(?:nada\b)/,/^(?:romper\b)/,/^(?:continuar\b)/,/^(?:Estructura\b)/,/^(?:crearPuntero\b)/,/^(?:obtenerDireccion\b)/,/^(?:reservarMemoria\b)/,/^(?:consultarTamanio\b)/,/^(?:destruirPuntero\b)/,/^(?:funcion\b)/,/^(?:Lista\b)/,/^(?:insertar\b)/,/^(?:obtener\b)/,/^(?:buscar\b)/,/^(?:Pila\b)/,/^(?:Apilar\b)/,/^(?:Desapilar\b)/,/^(?:Encolar\b)/,/^(?:Desencolar\b)/,/^(?:Cola\b)/,/^(?:Si\b)/,/^(?:Es_verdadero\b)/,/^(?:Es_falso\b)/,/^(?:Fin-si\b)/,/^(?:Evaluar_si\b)/,/^(?:Es_igual_a\b)/,/^(?:defecto\b)/,/^(?:Repetir_Mientras\b)/,/^(?:hacer\b)/,/^(?:mientras\b)/,/^(?:Ciclo_doble_condicion\b)/,/^(?:Repetir\b)/,/^(?:hasta_que\b)/,/^(?:Repetir_contando\b)/,/^(?:variable\b)/,/^(?:desde\b)/,/^(?:hasta\b)/,/^(?:Enciclar\b)/,/^(?:Contador\b)/,/^(?:Leer_Teclado\b)/,/^(?:@Sobrescribir\b)/,/^(?:([a-zA-Z](_|[a-zA-Z0-9])*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compi1;
exports.Parser = compi1.Parser;
exports.parse = function () { return compi1.parse.apply(compi1, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}