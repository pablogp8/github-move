/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var compi1 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[103,105,108],$V1=[2,104],$V2=[1,14],$V3=[1,39],$V4=[1,40],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,24],$V9=[1,25],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,23],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,35],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[5,37,47,48,49,50,51,64,67,93,96,97,98,99,100,101,103,105,108,127,129,130,131,132,136,139,140,142,143,145,147,148,149],$Vw=[1,54],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,60],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[31,32,33,34,37,66,81,82,93,96,97,98,99,100,101,115],$VF=[5,37,46,47,48,49,50,51,63,64,67,93,96,97,98,99,100,101,103,105,108,111,116,117,118,127,129,130,131,132,136,139,140,142,143,145,147,148,149],$VG=[1,109],$VH=[1,110],$VI=[1,111],$VJ=[1,113],$VK=[1,114],$VL=[1,115],$VM=[1,118],$VN=[1,107],$VO=[1,121],$VP=[1,120],$VQ=[1,122],$VR=[1,123],$VS=[1,124],$VT=[1,125],$VU=[1,126],$VV=[1,127],$VW=[1,128],$VX=[1,134],$VY=[1,131],$VZ=[1,133],$V_=[37,85,86,87,88,89,90,91,92],$V$=[1,157],$V01=[1,177],$V11=[1,178],$V21=[33,66],$V31=[2,126],$V41=[1,181],$V51=[1,182],$V61=[1,183],$V71=[1,184],$V81=[1,185],$V91=[1,186],$Va1=[1,187],$Vb1=[1,188],$Vc1=[1,189],$Vd1=[1,190],$Ve1=[1,191],$Vf1=[1,192],$Vg1=[1,193],$Vh1=[1,194],$Vi1=[10,18,19,20,21,22,23,24,25,26,27,28,29,30,33,37,46,63,66,153],$Vj1=[2,83],$Vk1=[1,199],$Vl1=[1,198],$Vm1=[2,54],$Vn1=[1,202],$Vo1=[10,18,19,20,21,22,23,24,25,26,27,28,29,30,33,37,46,60,63,66,153],$Vp1=[1,214],$Vq1=[31,32,34,37,81,82,93,96,97,98,99,100,101,115],$Vr1=[2,142],$Vs1=[1,256],$Vt1=[10,18,19,20,21,22,23,24,25,26,27,33,37,46,63,66,153],$Vu1=[1,285],$Vv1=[46,66],$Vw1=[10,60,62],$Vx1=[37,47,48,49,50,51,63],$Vy1=[5,37,46,47,48,49,50,51,64,67,93,96,97,98,99,100,101,103,105,108,111,116,117,118,127,129,130,131,132,136,139,140,142,143,145,147,148,149],$Vz1=[37,46,93,96,97,98,99,100,101,115,123],$VA1=[2,147],$VB1=[10,18,19,33,37,46,63,66,153],$VC1=[10,18,19,20,21,33,37,46,63,66,153],$VD1=[10,18,19,20,21,24,25,26,27,33,37,46,63,66,153],$VE1=[10,18,19,20,21,26,27,33,37,46,63,66,153],$VF1=[37,46,47,48,49,50,51,64,67,93,96,97,98,99,100,101,111,116,117,118,127,129,130,131,132,136,139,140,142,143,145,147,148,149],$VG1=[2,119],$VH1=[1,353],$VI1=[1,352],$VJ1=[1,355],$VK1=[47,48,49,50,51],$VL1=[2,133],$VM1=[1,365],$VN1=[1,372],$VO1=[1,373],$VP1=[1,374],$VQ1=[152,154];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"lisexp":4,"EOF":5,"expressions2":6,"declara":7,"declara2":8,"funci":9,"PCOMA":10,"classes":11,"estrut":12,"puntcre":13,"destrupunt":14,"strdat":15,"sentscontr":16,"e":17,"MAS":18,"MENOS":19,"MULTI":20,"DIVI":21,"MAYIGL":22,"MENIGL":23,"MAYOR":24,"MENOR":25,"IGL":26,"DIFE":27,"OOR":28,"OAND":29,"OXOR":30,"ONOT":31,"APAREN":32,"CPAREN":33,"NUMERO":34,"expc":35,"tipodat":36,"ID":37,"declara1":38,"constructo":39,"constructo2":40,"constructo1":41,"listparam1":42,"listallam2":43,"ALLAVE":44,"bodyfun":45,"CLLAVE":46,"TENTE":47,"TDECI":48,"TCARAC":49,"TBOOL":50,"VACIO":51,"asignapr1":52,"declara3":53,"estrpun":54,"expc2":55,"asigna":56,"PUNTO":57,"PPUNTE":58,"funciones":59,"ASIG":60,"defarre":61,"ACORCH":62,"CCORCH":63,"CREAP":64,"puntcre2":65,"COMA":66,"DESTPUNT":67,"asignapr3":68,"aop":69,"asignapr2":70,"aumdism":71,"NUEVO":72,"nadda":73,"AUMEN":74,"DISM":75,"ASUM":76,"AMULTI":77,"AMENOS":78,"ADIVI":79,"expc1":80,"CADENA":81,"CARACTER":82,"classes1":83,"listallam":84,"TAMN":85,"INSRT":86,"OBTNR":87,"BSQR":88,"APILAR":89,"DAPILAR":90,"ENCOLAR":91,"DENCOLAR":92,"CONCAT":93,"funci2":94,"cncat":95,"CONVCAD":96,"CONVENT":97,"IMPR":98,"OBTDIR":99,"RESERMEM":100,"CONSULTAM":101,"importacion":102,"IMPOR":103,"classes2":104,"CLASS":105,"hern":106,"bodclas":107,"PRINCIPAL":108,"HERENC":109,"visible":110,"OVERWRIT":111,"posid2":112,"listallameste":113,"posid":114,"ESTE":115,"PUBL":116,"PRIV":117,"PROTE":118,"listparam":119,"tipfun":120,"listparam3":121,"FUNSC":122,"RETORNA":123,"NADA":124,"nadda2":125,"nadda2op":126,"ESTRUCTUR":127,"bodestrut":128,"LISTT":129,"PILA":130,"COLA":131,"CSI":132,"sentifV":133,"sentiff":134,"FSI":135,"EVALUARS":136,"bodeval":137,"defeval":138,"REPMNT":139,"HACER":140,"MNTRAS":141,"CICLODC":142,"REPTIR":143,"HASTAQ":144,"REPCONT":145,"bodrepcon":146,"ENCICLAR":147,"CONTADOR":148,"LEERT":149,"EVERDAD":150,"EFALSO":151,"ESIGLA":152,"DPUNTO":153,"DFCT":154,"VARIBL":155,"DSD":156,"HSTA":157,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"PCOMA",18:"MAS",19:"MENOS",20:"MULTI",21:"DIVI",22:"MAYIGL",23:"MENIGL",24:"MAYOR",25:"MENOR",26:"IGL",27:"DIFE",28:"OOR",29:"OAND",30:"OXOR",31:"ONOT",32:"APAREN",33:"CPAREN",34:"NUMERO",37:"ID",44:"ALLAVE",46:"CLLAVE",47:"TENTE",48:"TDECI",49:"TCARAC",50:"TBOOL",51:"VACIO",57:"PUNTO",58:"PPUNTE",60:"ASIG",62:"ACORCH",63:"CCORCH",64:"CREAP",66:"COMA",67:"DESTPUNT",72:"NUEVO",74:"AUMEN",75:"DISM",76:"ASUM",77:"AMULTI",78:"AMENOS",79:"ADIVI",81:"CADENA",82:"CARACTER",85:"TAMN",86:"INSRT",87:"OBTNR",88:"BSQR",89:"APILAR",90:"DAPILAR",91:"ENCOLAR",92:"DENCOLAR",93:"CONCAT",96:"CONVCAD",97:"CONVENT",98:"IMPR",99:"OBTDIR",100:"RESERMEM",101:"CONSULTAM",103:"IMPOR",105:"CLASS",108:"PRINCIPAL",109:"HERENC",111:"OVERWRIT",115:"ESTE",116:"PUBL",117:"PRIV",118:"PROTE",122:"FUNSC",123:"RETORNA",124:"NADA",127:"ESTRUCTUR",129:"LISTT",130:"PILA",131:"COLA",132:"CSI",135:"FSI",136:"EVALUARS",139:"REPMNT",140:"HACER",141:"MNTRAS",142:"CICLODC",143:"REPTIR",144:"HASTAQ",145:"REPCONT",147:"ENCICLAR",148:"CONTADOR",149:"LEERT",150:"EVERDAD",151:"EFALSO",152:"ESIGLA",153:"DPUNTO",154:"DFCT",155:"VARIBL",156:"DSD",157:"HSTA"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,1],[17,1],[7,2],[8,2],[39,3],[40,1],[40,1],[40,0],[41,1],[41,3],[36,1],[36,1],[36,1],[36,1],[36,1],[38,2],[38,2],[38,2],[38,1],[38,4],[54,1],[54,1],[53,1],[53,2],[53,1],[56,2],[56,0],[61,4],[61,3],[13,8],[65,1],[65,1],[14,5],[52,2],[52,1],[52,2],[52,1],[68,1],[68,2],[68,1],[70,2],[70,0],[71,1],[71,1],[69,2],[69,2],[69,2],[69,2],[35,2],[35,1],[35,1],[35,1],[35,1],[80,2],[80,3],[80,0],[55,1],[55,2],[55,4],[55,4],[55,4],[55,4],[55,3],[55,4],[55,3],[9,7],[9,4],[9,4],[9,4],[9,4],[9,4],[9,4],[94,1],[95,2],[95,0],[102,6],[102,0],[11,2],[104,6],[104,6],[106,2],[106,0],[107,3],[107,2],[107,4],[107,3],[107,2],[107,2],[107,2],[107,2],[107,2],[107,0],[84,1],[84,0],[43,5],[43,2],[113,1],[114,1],[114,0],[112,1],[112,0],[83,3],[110,1],[110,1],[110,1],[110,0],[59,6],[119,1],[119,0],[42,5],[42,3],[120,1],[120,1],[121,3],[121,0],[45,6],[45,4],[45,3],[45,4],[45,0],[73,1],[73,3],[125,3],[125,1],[125,3],[126,3],[126,1],[12,6],[128,1],[128,1],[128,2],[128,2],[15,9],[15,9],[15,9],[16,7],[16,8],[16,6],[16,8],[16,8],[16,8],[16,6],[16,4],[16,6],[16,7],[133,3],[134,3],[134,0],[137,3],[137,4],[138,2],[146,11]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
        return $$[$0-1];
break;
case 2:
 this.$ = ['ListaExp',{},$$[$0-1],$$[$0]];  
break;
case 3: case 4:
 this.$=$$[$0]; 
break;
case 5:
this.$=$$[$0]
break;
case 6:
 this.$= $$[$0-1]; 
break;
case 7: case 8: case 9: case 10: case 11: case 12:
 this.$= $$[$0]; 
break;
case 13:
this.$ = ['SUMA',{},$$[$0-2],$$[$0]];
break;
case 14:
this.$ = ['RES',{},$$[$0-2],$$[$0]];
break;
case 15:
this.$ = ['MULTIP',{},$$[$0-2],$$[$0]];
break;
case 16:
this.$ = ['DIVI',{},$$[$0-2],$$[$0]];
break;
case 17:
this.$ = ['MAYIGL',{},$$[$0-2],$$[$0]];
break;
case 18:
this.$ = ['MENIGL',{},$$[$0-2],$$[$0]];
break;
case 19:
this.$ = ['MAYOR',{},$$[$0-2],$$[$0]];
break;
case 20:
this.$ = ['MENOR',{},$$[$0-2],$$[$0]];
break;
case 21:
this.$ = ['IGL',{},$$[$0-2],$$[$0]];
break;
case 22:
this.$ = ['DIFE',{},$$[$0-2],$$[$0]];
break;
case 23:
this.$ = ['OOR',{},$$[$0-2],$$[$0]];
break;
case 24:
this.$ = ['OAND',{},$$[$0-2],$$[$0]];
break;
case 25:
this.$ = ['OXOR',{},$$[$0-2],$$[$0]];
break;
case 26:
this.$ = ['ONOT',{},$$[$0],{}];
break;
case 27:
this.$ = ['PARENT',{},$$[$0-1],{}];
break;
case 28:
this.$ = Number(yytext);
break;
case 29: case 53:
this.$=$$[$0];
break;
case 30:
this.$ = ['POSIBLE',$$[$0-1],{},$$[$0]];
break;
case 31:
this.$ = ['DECLARA',{},$$[$0-1],$$[$0]];
break;
case 38: case 39: case 40: case 41: case 42:
this.$=yytext;
break;
case 51:
this.$ = ['ASIG',{},{},$$[$0-1]];
break;
case 54:
this.$={};
break;
case 76:
this.$=yytext; 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,36:13,102:22,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,64:$V8,67:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,127:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,136:$Vm,139:$Vn,140:$Vo,142:$Vp,143:$Vq,145:$Vr,147:$Vs,148:$Vt,149:$Vu}),{1:[3]},o($V0,$V1,{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,36:13,102:22,6:45,5:[1,44],37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,64:$V8,67:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,127:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,136:$Vm,139:$Vn,140:$Vo,142:$Vp,143:$Vq,145:$Vr,147:$Vs,148:$Vt,149:$Vu}),o($Vv,[2,3]),o($Vv,[2,4]),o($Vv,[2,5]),{10:[1,46]},o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vv,[2,12]),{8:47,37:$V2},{10:[1,52],32:[1,51],37:[1,50],38:48,52:49,54:53,57:[1,58],58:[1,59],60:$Vw,61:56,62:$Vx,69:55,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{32:[1,67]},{32:[1,68]},{32:[1,69]},{32:[1,70]},{32:[1,71]},{32:[1,72]},{32:[1,73]},{103:[1,75],104:74,105:[1,76],108:[1,77]},{37:[1,78]},{32:[1,79]},{32:[1,80]},{37:[1,81]},{37:[1,82]},{37:[1,83]},{32:[1,84]},{32:[1,85]},{32:[1,86]},{44:[1,87]},{32:[1,88]},{44:[1,89]},{32:[1,90]},{37:[1,91]},{32:[1,92]},{32:[1,93]},o($VE,[2,38]),o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,41]),o($VE,[2,42]),{1:[2,1]},o($Vv,[2,2]),o($Vv,[2,6]),o($VF,[2,30]),o($VF,[2,31]),{10:[1,94]},{10:[1,98],32:[1,99],52:97,53:95,59:96,60:$Vw,61:56,62:$Vx,69:55,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{9:117,17:108,31:$VG,32:$VH,33:[2,35],34:$VI,35:112,36:106,37:$VJ,39:100,40:101,42:102,43:103,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:105,115:$VM,120:104,122:$VN},o($VF,[2,46]),{37:$VO,55:119,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW},{9:117,17:130,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:$VX,68:129,72:$VY,73:132,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,124:$VZ},{10:[2,62]},{10:[2,69],60:[1,137],62:[1,136],70:135},{10:[2,64]},o($V_,[2,48]),o($V_,[2,49]),{34:[1,138]},{34:[1,139]},{34:[1,140]},{34:[1,141]},{9:117,17:142,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{10:[2,70]},{10:[2,71]},{37:[1,143]},{9:117,17:144,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:145,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:147,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,94:146,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{37:[1,148]},{9:117,17:149,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{37:[1,150]},o($Vv,[2,105]),{32:[1,151]},{37:[1,152]},{32:[1,153]},{62:[1,154]},{36:156,37:$V$,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:155},{37:[1,158]},{60:[1,159]},{60:[1,160]},{60:[1,161]},{9:117,17:162,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:163,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:164,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,165]},{9:117,17:166,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,167]},{146:168,155:[1,169]},{44:[1,170]},{9:117,17:171,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:172,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,50]),{10:[1,173]},o($VF,[2,52]),{33:[2,136],36:106,42:175,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,119:174,120:104,122:$VN},o($VF,[2,45]),{33:[1,176]},{33:[2,33],66:$V01},{33:[2,34],66:$V11},{37:[1,179]},o($V21,$V31,{114:180,37:$V41}),{37:[2,139]},{37:[2,140]},o([33,37,66],[2,124],{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),{9:117,17:195,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:196,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vi1,[2,28]),o($Vi1,[2,29]),o($Vi1,$Vj1,{80:197,32:$Vk1,57:$Vl1}),o($Vi1,[2,77]),o($Vi1,[2,78]),o($Vi1,[2,79]),o($Vi1,[2,80]),{57:[1,200]},{10:$Vm1,56:201,60:$Vn1},o($Vo1,[2,84]),o($Vo1,$Vj1,{80:203,32:$Vk1,57:$Vl1}),{32:[1,204]},{32:[1,205]},{32:[1,206]},{32:[1,207]},{32:[1,208]},{32:[1,209]},{32:[1,210]},{10:[2,61]},{10:[2,65],18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1},{9:117,17:211,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{10:[2,67]},{10:[2,148]},{9:117,17:213,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:$Vp1,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,125:212},{10:[2,63]},{9:117,17:215,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:130,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:$VX,68:216,72:$VY,73:132,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,124:$VZ},{10:[2,72]},{10:[2,73]},{10:[2,74]},{10:[2,75]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,63:[1,217]},{66:[1,218]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,219]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,220]},{33:[1,221]},o($V21,[2,100],{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),{33:[1,222]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,223]},{33:[1,224]},{81:[1,225]},{44:[2,109],106:226,109:[1,227]},{33:[1,228]},{7:230,8:231,36:13,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,128:229},{66:[1,232]},o($V21,[2,58]),o($V21,[2,59]),{33:[1,233]},{72:[1,234]},{72:[1,235]},{72:[1,236]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,237]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,238]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,239]},{141:[1,240]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,66:[1,241]},{144:[1,242]},{33:[1,243]},{153:[1,244]},{46:[1,245]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,246]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,66:[1,247]},o($VF,[2,51]),{33:[1,248]},{33:[2,135],66:$V01},{10:[1,250],41:249,44:[1,251]},{36:106,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,120:252,122:$VN},o($Vq1,[2,128],{112:253,36:254,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7}),o($V21,$Vr1,{121:255,62:$Vs1}),o($V21,[2,123]),o($V21,[2,125]),{9:117,17:257,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:258,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:259,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:260,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:261,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:262,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:263,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:264,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:265,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:266,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:267,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:268,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:269,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vt1,[2,26],{28:$Vf1,29:$Vg1,30:$Vh1}),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,270]},o($Vi1,[2,76]),{37:$VO,55:271,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW},{9:117,17:108,31:$VG,32:$VH,33:[2,121],34:$VI,35:112,37:$VJ,43:273,81:$VK,82:$VL,83:116,84:272,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:105,115:$VM},{37:[1,274]},{10:[1,275]},{9:117,17:276,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vo1,[2,85]),{9:117,17:277,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{34:[1,278]},{9:117,17:279,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{9:117,17:280,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{33:[1,281]},{9:117,17:282,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{33:[1,283]},{10:[2,66],18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1},{46:[1,284],66:$Vu1},o($Vv1,[2,151],{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),{9:117,17:213,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:$Vp1,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,125:286},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,63:[1,287]},{10:[2,68]},o($Vw1,[2,56]),{9:117,17:147,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,94:288,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vi1,[2,94]),o($Vi1,[2,95]),o($Vi1,[2,96]),o($Vi1,[2,97]),o($Vi1,[2,98]),o($Vi1,[2,99]),{33:[1,289]},{44:[1,290]},{37:[1,291]},{44:[1,292]},{7:294,8:295,36:13,37:$V2,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,63:[1,293]},o($Vx1,[2,156]),o($Vx1,[2,157]),{37:[1,296]},{10:[1,297]},{129:[1,298]},{130:[1,299]},{131:[1,300]},{133:301,150:[1,302]},{44:[1,303]},{44:[1,304]},{32:[1,305]},{9:117,17:306,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{32:[1,307]},{44:[1,308]},{37:[1,309]},o($Vy1,[2,170]),{44:[1,310]},{37:[1,311]},{44:[1,312]},o($VF,[2,32]),o($VF,[2,36]),o($Vz1,$VA1,{45:313}),{37:[1,314]},{9:117,17:108,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,113:315,115:$VM},o($Vq1,[2,127]),o($V21,[2,138]),{9:117,17:316,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($VB1,[2,13],{20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VB1,[2,14],{20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VC1,[2,15],{22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VC1,[2,16],{22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),o($Vt1,[2,17],{28:$Vf1,29:$Vg1,30:$Vh1}),o($Vt1,[2,18],{28:$Vf1,29:$Vg1,30:$Vh1}),o($VD1,[2,19],{22:$V91,23:$Va1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VD1,[2,20],{22:$V91,23:$Va1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VE1,[2,21],{22:$V91,23:$Va1,24:$Vb1,25:$Vc1,28:$Vf1,29:$Vg1,30:$Vh1}),o($VE1,[2,22],{22:$V91,23:$Va1,24:$Vb1,25:$Vc1,28:$Vf1,29:$Vg1,30:$Vh1}),o($Vi1,[2,23]),o($Vi1,[2,24]),o($Vi1,[2,25]),o($Vi1,[2,27]),o($Vo1,[2,81]),{33:[1,317]},{33:[2,120],66:$V11},o($Vi1,[2,129]),o($VF,[2,47]),{10:[2,53],18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,318]},{33:[1,319]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,320]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,321]},o($Vo1,[2,90]),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,322]},o($Vo1,[2,92]),{10:[2,149]},{9:117,17:325,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:[1,324],81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,126:323},{46:[1,326],66:$Vu1},o($Vw1,[2,55]),{33:[2,102],66:[1,328],95:327},{10:[1,329]},o($VF1,$VG1,{107:330}),{44:[2,108]},o($VF1,$VG1,{107:331}),{10:[1,332]},o($Vx1,[2,158]),o($Vx1,[2,159]),{33:[1,333]},o($Vy1,[2,60]),{32:[1,334]},{32:[1,335]},{32:[1,336]},{134:337,135:[2,175],151:[1,338]},{44:[1,339]},{137:340,152:[1,341]},{46:[1,342]},{9:117,17:343,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,344]},{9:117,17:345,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{46:[1,346]},{10:[1,347]},{46:[1,348]},{33:[1,349]},o($Vz1,$VA1,{45:350}),{9:354,37:$VH1,46:[1,351],93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VI1,123:$VJ1},o($V21,$Vr1,{121:356,62:$Vs1}),o($V21,$V31,{114:357,37:$V41}),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,63:[1,358]},o($Vo1,[2,82]),o($Vo1,[2,86]),o($Vo1,[2,87]),o($Vo1,[2,88]),o($Vo1,[2,89]),o($Vo1,[2,91]),o($Vv1,[2,150]),{9:117,17:213,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,44:$Vp1,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM,125:359},o($Vv1,[2,154],{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1}),o($Vv1,[2,152]),{33:[1,360]},{9:117,17:361,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($V0,[2,103]),o($VK1,$VL1,{110:363,8:364,9:366,12:367,13:368,14:369,15:370,16:371,37:$V2,46:[1,362],64:$V8,67:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,111:$VM1,116:$VN1,117:$VO1,118:$VP1,127:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,136:$Vm,139:$Vn,140:$Vo,142:$Vp,143:$Vq,145:$Vr,147:$Vs,148:$Vt,149:$Vu}),o($VK1,$VL1,{110:363,8:364,9:366,12:367,13:368,14:369,15:370,16:371,37:$V2,46:[1,375],64:$V8,67:$V9,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,111:$VM1,116:$VN1,117:$VO1,118:$VP1,127:$Vh,129:$Vi,130:$Vj,131:$Vk,132:$Vl,136:$Vm,139:$Vn,140:$Vo,142:$Vp,143:$Vq,145:$Vr,147:$Vs,148:$Vt,149:$Vu}),o($Vy1,[2,155]),{10:$Vm1,56:376,60:$Vn1},{36:156,37:$V$,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:377},{36:156,37:$V$,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:378},{36:156,37:$V$,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7,65:379},{135:[1,380]},{44:[1,381]},{46:[1,382]},{138:383,152:[1,384],154:[1,385]},{9:117,17:386,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($Vy1,[2,165]),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,387]},{44:[1,388]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[1,389]},o($Vy1,[2,169]),{156:[1,390]},o($Vy1,[2,171]),{10:[1,391]},{9:354,37:$VH1,46:[1,392],93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VI1,123:$VJ1},o($VF,[2,37]),{57:[1,393]},{52:394,60:$Vw,61:56,62:$Vx,69:55,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},{10:[1,395]},{9:117,17:396,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},o($V21,[2,137]),o($V21,[2,122]),o($V21,[2,141]),{46:[1,397],66:$Vu1},o($Vi1,[2,93]),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[2,101]},o($Vv,[2,106]),{7:398,36:13,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VF1,[2,111]),o($VK1,$VL1,{110:399,116:$VN1,117:$VO1,118:$VP1}),{10:[1,400]},o($VF1,[2,114]),o($VF1,[2,115]),o($VF1,[2,116]),o($VF1,[2,117]),o($VF1,[2,118]),o($VK1,[2,130]),o($VK1,[2,131]),o($VK1,[2,132]),o($Vv,[2,107]),{10:[1,401]},{33:[1,402]},{33:[1,403]},{33:[1,404]},o($Vy1,[2,163]),{46:[1,405]},o([135,151],[2,173]),{46:[1,406]},{9:117,17:407,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{153:[1,408]},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,153:[1,409]},{10:[1,410]},{46:[1,411]},{10:[1,412]},{153:[1,413]},o($Vy1,[2,172]),o($VF,[2,134]),{37:[1,414]},{10:[1,415]},o($Vz1,[2,145]),{10:[1,416],18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1},o($Vv1,[2,153]),o($VF1,[2,110]),{7:417,36:13,47:$V3,48:$V4,49:$V5,50:$V6,51:$V7},o($VF1,[2,113]),o($Vy1,[2,57]),{10:[1,418]},{10:[1,419]},{10:[1,420]},{135:[2,174]},o($Vy1,[2,164]),{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,153:[1,421]},{46:[2,178]},o($VQ1,[2,176]),o($Vy1,[2,166]),o($Vy1,[2,167]),o($Vy1,[2,168]),{9:117,17:422,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{52:423,60:$Vw,61:56,62:$Vx,69:55,71:57,74:$Vy,75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD},o($Vz1,[2,144]),o($Vz1,[2,146]),o($VF1,[2,112]),o($Vy1,[2,160]),o($Vy1,[2,161]),o($Vy1,[2,162]),o($VQ1,[2,177]),{10:[1,424],18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1},{10:[1,425]},{157:[1,426]},o($Vz1,[2,143]),{153:[1,427]},{9:117,17:428,31:$VG,32:$VH,34:$VI,35:112,37:$VJ,81:$VK,82:$VL,83:116,93:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vg,115:$VM},{18:$V51,19:$V61,20:$V71,21:$V81,22:$V91,23:$Va1,24:$Vb1,25:$Vc1,26:$Vd1,27:$Ve1,28:$Vf1,29:$Vg1,30:$Vh1,33:[2,179]}],
defaultActions: {44:[2,1],55:[2,62],57:[2,64],65:[2,70],66:[2,71],106:[2,139],107:[2,140],129:[2,61],132:[2,67],133:[2,148],135:[2,63],138:[2,72],139:[2,73],140:[2,74],141:[2,75],216:[2,68],284:[2,149],291:[2,108],405:[2,174],408:[2,178]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:console.log("COMENTARIO: "+yy_.yytext); 
break;
case 2:console.log("CADENA: "+ yy_.yytext); return "CADENA"
break;
case 3:console.log("CARACTER: "+ yy_.yytext); return "CARACTER"   
break;
case 4:console.log("numero: " +yy_.yytext); return "NUMERO"
break;
case 5:console.log("Signo: " +yy_.yytext);  return "ASUM"
break;
case 6:console.log("Signo: " +yy_.yytext);  return "AMULTI"
break;
case 7:console.log("Signo: " +yy_.yytext);  return "AMENOS"
break;
case 8:console.log("Signo: " +yy_.yytext);  return "ADIVI"
break;
case 9:console.log("Signo: " +yy_.yytext); return "MULTI"
break;
case 10:console.log("Signo: " +yy_.yytext); return "DIVI"
break;
case 11:console.log("Signo: " +yy_.yytext); return "POT"
break;
case 12:console.log("Signo: " +yy_.yytext);  return "AUMEN"
break;
case 13:console.log("Signo: " +yy_.yytext);  return "DISM"
break;
case 14:console.log("Signo: " +yy_.yytext);  return "PPUNTE"
break;
case 15:console.log("Signo: " +yy_.yytext); return "MENOS"
break;
case 16:console.log("Signo: " +yy_.yytext); return "MAS"
break;
case 17:console.log("Signo: " +yy_.yytext);  return "APAREN"
break;
case 18:console.log("Signo: " +yy_.yytext);  return "CPAREN"
break;
case 19:console.log("Signo: " +yy_.yytext);  return "ACORCH"
break;
case 20:console.log("Signo: " +yy_.yytext);  return "CCORCH"
break;
case 21:console.log("Signo: " +yy_.yytext);  return "ALLAVE"
break;
case 22:console.log("Signo: " +yy_.yytext);  return "CLLAVE"
break;
case 23:console.log("Signo: " +yy_.yytext);  return "MAYIGL"
break;
case 24:console.log("Signo: " +yy_.yytext);  return "MENIGL"
break;
case 25:console.log("Signo: " +yy_.yytext);  return "MAYOR"
break;
case 26:console.log("Signo: " +yy_.yytext);  return "MENOR"
break;
case 27:console.log("Signo: " +yy_.yytext);  return "IGL"
break;
case 28:console.log("Signo: " +yy_.yytext);  return "DIFE"
break;
case 29:console.log("Signo: " +yy_.yytext);  return "ASIG"
break;
case 30:console.log("Signo: " +yy_.yytext);  return "OOR"
break;
case 31:console.log("Signo: " +yy_.yytext);  return "OAND"
break;
case 32:console.log("Signo: " +yy_.yytext);  return "OXOR"
break;
case 33:console.log("Signo: " +yy_.yytext);  return "ONOT"
break;
case 34:console.log("Signo: " +yy_.yytext);  return "PCOMA"
break;
case 35:console.log("Signo: " +yy_.yytext);  return "COMA"
break;
case 36:console.log("Signo: " +yy_.yytext);  return "PUNTO"
break;
case 37:console.log("Signo: " +yy_.yytext);  return "DPUNTO"
break;
case 38:console.log("palabra: " +yy_.yytext);  return "TENTE"
break;
case 39:console.log("palabra: " +yy_.yytext);  return "TDECI"
break;
case 40:console.log("palabra: " +yy_.yytext);  return "TCARAC"
break;
case 41:console.log("palabra: " +yy_.yytext);  return "TBOOL"
break;
case 42:console.log("palabra: " +yy_.yytext);  return "TAMN"
break;
case 43:console.log("palabra: " +yy_.yytext);  return "CONCAT"
break;
case 44:console.log("palabra: " +yy_.yytext);  return "CONVCAD"
break;
case 45:console.log("palabra: " +yy_.yytext);  return "CONVENT"
break;
case 46:console.log("palabra: " +yy_.yytext);  return "IMPR"
break;
case 47:console.log("palabra: " +yy_.yytext);  return "CLASS"
break;
case 48:console.log("palabra: " +yy_.yytext);  return "ESTE"
break;
case 49:console.log("palabra: " +yy_.yytext);  return "PRIV"
break;
case 50:console.log("palabra: " +yy_.yytext);  return "PUBL"
break;
case 51:console.log("palabra: " +yy_.yytext);  return "PROTE"
break;
case 52:console.log("palabra: " +yy_.yytext);  return "IMPOR"
break;
case 53:console.log("palabra: " +yy_.yytext);  return "HERENC"
break;
case 54:console.log("palabra: " +yy_.yytext);  return "VACIO"
break;
case 55:console.log("palabra: " +yy_.yytext);  return "RETORNA"
break;
case 56:console.log("palabra: " +yy_.yytext);  return "PRINCIPAL"
break;
case 57:console.log("palabra: " +yy_.yytext);  return "NUEVO"
break;
case 58:console.log("palabra: " +yy_.yytext);  return "NADA"
break;
case 59:console.log("palabra: " +yy_.yytext);  return "ROMPE"
break;
case 60:console.log("palabra: " +yy_.yytext);  return "CONTINUA"
break;
case 61:console.log("palabra: " +yy_.yytext);  return "ESTRUCTUR"
break;
case 62:console.log("palabra: " +yy_.yytext);  return "CREAP"
break;
case 63:console.log("palabra: " +yy_.yytext);  return "OBTDIR"
break;
case 64:console.log("palabra: " +yy_.yytext);  return "RESERMEM"
break;
case 65:console.log("palabra: " +yy_.yytext);  return "CONSULTAM"
break;
case 66:console.log("palabra: " +yy_.yytext);  return "DESTPUNT"
break;
case 67:console.log("palabra: " +yy_.yytext);  return "FUNSC"
break;
case 68:console.log("palabra: " +yy_.yytext);  return "LISTT"
break;
case 69:console.log("palabra: " +yy_.yytext);  return "INSRT"
break;
case 70:console.log("palabra: " +yy_.yytext);  return "OBTNR"
break;
case 71:console.log("palabra: " +yy_.yytext);  return "BSQR"
break;
case 72:console.log("palabra: " +yy_.yytext);  return "PILA"
break;
case 73:console.log("palabra: " +yy_.yytext);  return "APILAR"
break;
case 74:console.log("palabra: " +yy_.yytext);  return "DAPILAR"
break;
case 75:console.log("palabra: " +yy_.yytext);  return "ENCOLAR"
break;
case 76:console.log("palabra: " +yy_.yytext);  return "DENCOLAR"
break;
case 77:console.log("palabra: " +yy_.yytext);  return "COLA"
break;
case 78:console.log("palabra: " +yy_.yytext);  return "CSI"
break;
case 79:console.log("palabra: " +yy_.yytext);  return "EVERDAD"
break;
case 80:console.log("palabra: " +yy_.yytext);  return "EFALSO"
break;
case 81:console.log("palabra: " +yy_.yytext);  return "FSI"
break;
case 82:console.log("palabra: " +yy_.yytext);  return "EVALUARS"
break;
case 83:console.log("palabra: " +yy_.yytext);  return "ESIGLA"
break;
case 84:console.log("palabra: " +yy_.yytext);  return "DFCT"
break;
case 85:console.log("palabra: " +yy_.yytext);  return "REPMNT"
break;
case 86:console.log("palabra: " +yy_.yytext);  return "HACER"
break;
case 87:console.log("palabra: " +yy_.yytext);  return "MNTRAS"
break;
case 88:console.log("palabra: " +yy_.yytext);  return "CICLODC"
break;
case 89:console.log("palabra: " +yy_.yytext);  return "REPTIR"
break;
case 90:console.log("palabra: " +yy_.yytext);  return "HASTAQ"
break;
case 91:console.log("palabra: " +yy_.yytext);  return "REPCONT"
break;
case 92:console.log("palabra: " +yy_.yytext);  return "VARIBL"
break;
case 93:console.log("palabra: " +yy_.yytext);  return "DSD"
break;
case 94:console.log("palabra: " +yy_.yytext);  return "HSTA"
break;
case 95:console.log("palabra: " +yy_.yytext);  return "ENCICLAR"
break;
case 96:console.log("palabra: " +yy_.yytext);  return "CONTADOR"
break;
case 97:console.log("palabra: " +yy_.yytext);  return "LEERT"
break;
case 98:console.log("palabra: " +yy_.yytext);  return "OVERWRIT"
break;
case 99:console.log("identificador: " +yy_.yytext); return "ID"
break;
case 100:return "EOF"
break;
case 101:return "INVALID"
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*[^"*\/"]*\*\/)/,/^(?:"[^\"]*")/,/^(?:'[^"'"]')/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\+=)/,/^(?:\*=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:\+\+)/,/^(?:--)/,/^(?:->)/,/^(?:-)/,/^(?:\+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\?\?)/,/^(?:!)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?::)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:booleano\b)/,/^(?:tamanio\b)/,/^(?:concatenar\b)/,/^(?:convertirAcadena\b)/,/^(?:convertirAentero\b)/,/^(?:imprimir\b)/,/^(?:clase\b)/,/^(?:este\b)/,/^(?:privado\b)/,/^(?:publico\b)/,/^(?:protegido\b)/,/^(?:importar\b)/,/^(?:hereda_de\b)/,/^(?:vacio\b)/,/^(?:retornar\b)/,/^(?:principal\b)/,/^(?:nuevo\b)/,/^(?:nada\b)/,/^(?:romper\b)/,/^(?:continuar\b)/,/^(?:Estructura\b)/,/^(?:crearPuntero\b)/,/^(?:obtenerDireccion\b)/,/^(?:reservarMemoria\b)/,/^(?:consultarTamanio\b)/,/^(?:destruirPuntero\b)/,/^(?:funcion\b)/,/^(?:Lista\b)/,/^(?:insertar\b)/,/^(?:obtener\b)/,/^(?:buscar\b)/,/^(?:Pila\b)/,/^(?:Apilar\b)/,/^(?:Desapilar\b)/,/^(?:Encolar\b)/,/^(?:Desencolar\b)/,/^(?:Cola\b)/,/^(?:Si\b)/,/^(?:Es_verdadero\b)/,/^(?:Es_falso\b)/,/^(?:Fin-si\b)/,/^(?:Evaluar_si\b)/,/^(?:Es_igual_a\b)/,/^(?:defecto\b)/,/^(?:Repetir_Mientras\b)/,/^(?:hacer\b)/,/^(?:mientras\b)/,/^(?:Ciclo_doble_condicion\b)/,/^(?:Repetir\b)/,/^(?:hasta_que\b)/,/^(?:Repetir_contando\b)/,/^(?:variable\b)/,/^(?:desde\b)/,/^(?:hasta\b)/,/^(?:Enciclar\b)/,/^(?:Contador\b)/,/^(?:Leer_Teclado\b)/,/^(?:@Sobrescribir\b)/,/^(?:([a-zA-Z](_|[a-zA-Z0-9])*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = compi1;
exports.Parser = compi1.Parser;
exports.parse = function () { return compi1.parse.apply(compi1, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}